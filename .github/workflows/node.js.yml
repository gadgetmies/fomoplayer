# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  # Label of the container job
  test:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:22-alpine

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: pgvector/pgvector:pg17
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Preinstall system dependencies
        run: |
          apk add --no-cache git postgresql-client

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Setup database
        run: psql -h postgres -U postgres -c 'CREATE DATABASE "multi-store-player-test";'
        env:
          PGPASSWORD: postgres

      - name: Run tests
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: yarn run ci:test
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres/multi-store-player-test
